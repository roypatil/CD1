all
---------------------------------------------------------------------------------------------------------------
Socket

//MyClient.java
import java.io.*;
import java.net.*;

public class MyClient {
public static void main(String[] args) {
try{	
Socket s=new Socket("localhost",6666);
	
DataOutputStream dout=new DataOutputStream(s.getOutputStream());

dout.writeUTF("Welcome to DC Practicals");
dout.flush();

dout.close();
s.close();

}catch(Exception e){System.out.println(e);}
}
}

//MyServer.java

import java.io.*;
import java.net.*;

public class MyServer {
public static void main(String[] args){
try{
ServerSocket ss=new ServerSocket(6666);
Socket s=ss.accept();//establishes connection 

DataInputStream dis=new DataInputStream(s.getInputStream());

String	str=(String)dis.readUTF();
System.out.println("message= "+str);

ss.close();

}catch(Exception e){System.out.println(e);}
}
}
-----------------------------------------------------------------------------------------------------------------
rmi

//SampleServer.java

import java.rmi.*;

public interface SampleServer extends Remote
{
  public int sum(int a,int b) throws RemoteException;
}





//SampleServerImpl.java

import java.rmi.*;
import java.rmi.server.*;
import java.rmi.registry.*;

public class SampleServerImpl extends UnicastRemoteObject implements SampleServer {
    SampleServerImpl() throws RemoteException {
        super();
    }

    public int sum(int a, int b) throws RemoteException {
        return (a + b);
    }

    public static void main(String args[]) {
        try {
            // create a local instance of the object
            SampleServerImpl server = new SampleServerImpl();

            // put the local instance in the registry
            LocateRegistry.createRegistry(1098); // Create RMI registry on default port 1098
            Naming.rebind("//localhost/SAMPLE-SERVER", server);

            System.out.println("Server waiting.....");
        } catch (Exception e) {
            System.out.println("Exception: " + e.toString());
        }
    }
}


SampleClient.java

import java.rmi.*;

public class SampleClient {
    public static void main(String[] args) {
        try {
            // get the remote object from the registry
            String url = "//localhost/SAMPLE-SERVER";
            SampleServer remoteObject = (SampleServer) Naming.lookup(url);

            System.out.println("Got remote object");
            System.out.println("1 + 2 = " + remoteObject.sum(1, 2));
        } catch (Exception e) {
            System.out.println("Exception: " + e.toString());
        }
    }
}







//javac SampleServer.java SampleServerImpl.java SampleClient.java

//rmiregistry

//java SampleServerImpl

//java SampleClient


//output
//Server waiting.....


//Security Manager loaded
//Got remote object
//1 + 2 = 3


------------------------------------------------------------------------------------------------------------
mutual exclusive

#include<bits/stdc++.h> 
using namespace std;

int main() {
    int ns,ncs,timestamp,site;
    cout<<"enter number of sites ";
    cin>>ns;
    cout<<"\nenter who enters critical section ";
    cin>>ncs;
    vector<int>ts(ns,0);
    vector<int>request;
    map<int,int>mp;
    
    for(int i=0;i<ncs;i++){
        cout<<"\nenter timestamps ";
        cin>>timestamp;
        cout<<"\nenter site number ";
        cin>>site;
        ts[site-1]=timestamp;
        request.push_back(site);
        mp[timestamp]=site;
    }
    
    cout<<"\nsite and timestamp\n";
    for(int i=0;i<ts.size();i++){
        cout<<i+1<<" "<<ts[i]<<endl; 
    }
    
    for(int i = 0;i<request.size();i++){
        cout<<"\nrequest from site "<<request[i]<<endl;
        for(int j=0;j<ts.size();j++){
            if(request[i]!=(j+1)){
                if(ts[j]>ts[request[i]-1] || ts[j]==0)
                    cout<<j+1<<" replied\n";
                else
                    cout<<j+1<<" delayed\n";
            
            }
        }
    }
    
    cout<<endl;
    map<int,int>::iterator it;
    it= mp.begin();
    int c = 0;
    for(it=mp.begin();it!=mp.end();it++){
        cout<<"site "<<it->second<<" enterred critical section\n";
        if(c==0)
            cout<<"\nSimilarly\n\n";
        c++;
    }


    return 0;
}

//output:
/*enter number of sites 5

enter who enters critical section 3

enter timestamps 2

enter site number 2

enter timestamps 3

enter site number 3

enter timestamps 1

enter site number 4

site and timestamp
1 0
2 2
3 3
4 1
5 0

request from site 2
1 replied
3 replied
4 delayed
5 replied

request from site 3
1 replied
2 delayed
4 delayed
5 replied

request from site 4
1 replied
2 replied
3 replied
5 replied

site 4 enterred critical section

Similarly

site 2 enterred critical section
site 3 enterred critical section*/
---------------------------------------------------------------------------------------------------------------
clock sync with lamport

// Java program to illustrate the Lamport's
// Logical Clock
import java.util.*;
public class GFG {

// Function to find the maximum timestamp
// between 2 events
static int max1(int a, int b)
{
	// Return the greatest of the two
	if (a > b)
	return a;
	else
	return b;
}

// Function to display the logical timestamp
static void display(int e1, int e2, int p1[], int p2[])
{
	int i;
	System.out.print(
	"\nThe time stamps of events in P1:\n");

	for (i = 0; i < e1; i++) {
	System.out.print(p1[i] + " ");
	}

	System.out.println(
	"\nThe time stamps of events in P2:");

	// Print the array p2[]
	for (i = 0; i < e2; i++)
	System.out.print(p2[i] + " ");
}

// Function to find the timestamp of events
static void lamportLogicalClock(int e1, int e2,
								int m[][])
{
	int i, j, k;
	int p1[] = new int[e1];
	int p2[] = new int[e2];
	// Initialize p1[] and p2[]
	for (i = 0; i < e1; i++)
	p1[i] = i + 1;

	for (i = 0; i < e2; i++)
	p2[i] = i + 1;
	for (i = 0; i < e2; i++)
	System.out.print("\te2" + (i + 1));

	for (i = 0; i < e1; i++) {
	System.out.print("\n e1" + (i + 1) + "\t");
	for (j = 0; j < e2; j++)
		System.out.print(m[i][j] + "\t");
	}

	for (i = 0; i < e1; i++) {
	for (j = 0; j < e2; j++) {

		// Change the timestamp if the
		// message is sent
		if (m[i][j] == 1) {
		p2[j] = max1(p2[j], p1[i] + 1);
		for (k = j + 1; k < e2; k++)
			p2[k] = p2[k - 1] + 1;
		}

		// Change the timestamp if the
		// message is received
		if (m[i][j] == -1) {
		p1[i] = max1(p1[i], p2[j] + 1);
		for (k = i + 1; k < e1; k++)
			p1[k] = p1[k - 1] + 1;
		}
	}
	}

	// Function Call
	display(e1, e2, p1, p2);
}

public static void main(String args[])
{
	int e1 = 5, e2 = 3;
	int m[][] = new int[5][3];
	// message is sent and received
	// between two process

	/*dep[i][j] = 1, if message is sent
					from ei to ej
		dep[i][j] = -1, if message is received
						by ei from ej
		dep[i][j] = 0, otherwise*/
	m[0][0] = 0;
	m[0][1] = 0;
	m[0][2] = 0;
	m[1][0] = 0;
	m[1][1] = 0;
	m[1][2] = 1;
	m[2][0] = 0;
	m[2][1] = 0;
	m[2][2] = 0;
	m[3][0] = 0;
	m[3][1] = 0;
	m[3][2] = 0;
	m[4][0] = 0;
	m[4][1] = -1;
	m[4][2] = 0;

	// Function Call
	lamportLogicalClock(e1, e2, m);
}
}

//output
/*        e21    e22    e23
 e11    0    0    0    
 e12    0    0    1    
 e13    0    0    0    
 e14    0    0    0    
 e15    0    -1    0    
The time stamps of events in P1:
1 2 3 4 5 
The time stamps of events in P2:
1 2 3 */
----------------------------------------------------------------------------------------------------------
election 


import java.util.Scanner;
 
public class GG {
   
    class Pro {
        int id;
        boolean act;
        Pro(int id)
        {
            this.id = id;
            act = true;
        }
    }
    int TotalProcess;
    Pro[] process;
    public GG() { }
    public void initialiseGG()
    {
        System.out.println("No of processes 5");
        TotalProcess = 5;
        process = new Pro[TotalProcess];
        int i = 0;
        while (i < process.length) {
            process[i] = new Pro(i);
            i++;
        }
    }
    public void Election()
    {
        System.out.println("Process no "
                           + process[FetchMaximum()].id
                           + " fails");
        process[FetchMaximum()].act = false;
        System.out.println("Election Initiated by 2");
        int initializedProcess = 2;
 
        int old = initializedProcess;
        int newer = old + 1;
 
        while (true) {
            if (process[newer].act) {
                System.out.println(
                    "Process " + process[old].id
                    + " pass Election(" + process[old].id
                    + ") to" + process[newer].id);
                old = newer;
            }
 
            newer = (newer + 1) % TotalProcess;
            if (newer == initializedProcess) {
                break;
            }
        }
 
        System.out.println("Process "
                           + process[FetchMaximum()].id
                           + " becomes coordinator");
        int coord = process[FetchMaximum()].id;
 
        old = coord;
        newer = (old + 1) % TotalProcess;
 
        while (true) {
 
            if (process[newer].act) {
                System.out.println(
                    "Process " + process[old].id
                    + " pass Coordinator(" + coord
                    + ") message to process "
                    + process[newer].id);
                old = newer;
            }
            newer = (newer + 1) % TotalProcess;
            if (newer == coord) {
                System.out.println("End Of Election ");
                break;
            }
        }
    }
    public int FetchMaximum()
    {
        int Ind = 0;
        int maxId = -9999;
        int i = 0;
        while (i < process.length) {
            if (process[i].act && process[i].id > maxId) {
                maxId = process[i].id;
                Ind = i;
            }
            i++;
        }
        return Ind;
    }
 
    public static void main(String arg[])
    {
        GG object = new GG();
        object.initialiseGG();
        object.Election();
    }
}
------------------------------------------------------------------------------------------------
my election
// Election algorithm
import java.util.*;  
  
class BullyAlgo{  
      
    static int numberOfProcess;  
    static int priorities[] = new int[100];  
    static int status[] = new int[100];  
    static int cord;  
    
    public static void main(String args[]){  
        System.out.println("Enter total number of processes:");  
        Scanner sc = new Scanner(System.in);  
        numberOfProcess = sc.nextInt();  
    
        int i;  
    
        for(i = 0; i<numberOfProcess; i++){  
            System.out.println("Status for process "+(i+1)+":");  
            status[i] = sc.nextInt();  
            System.out.println("Priority of process "+(i+1)+":");  
            priorities[i] = sc.nextInt();  
        }  
    
        System.out.println("Enter proces which will initiate election");  
        int ele = sc.nextInt();  
        
        sc.close();  

        electProcess(ele);  
        System.out.println("After electing process the final coordinator is "+cord);  
    }  
    
    static void electProcess(int ele){  
        ele = ele - 1;  
        cord = ele + 1;  
        
        for(int i = 0; i<numberOfProcess; i++){  
            if(priorities[ele]<priorities[i]){  
                System.out.println("Election message is sent from "+(ele+1)+" to "+(i+1));  
            if(status[i]==1)  
                electProcess(i+1);  
            }  
        }  
    }  
} 

//output
//Enter total number of processes:
//5
//Status for process 1:
//1
//Priority of process 1:
//3
//Status for process 2:
//1
//Priority of process 2:
//4
//Status for process 3:
//1
//Priority of process 3:
//2
//Status for process 4:
//1
//Priority of process 4:
//5
//Status for process 5:
//1
//Priority of process 5:
//1
//Enter proces which will initiate election
//3
//Election message is sent from 3 to 1
//Election message is sent from 1 to 2
//Election message is sent from 2 to 4
//Election message is sent from 1 to 4
//Election message is sent from 3 to 2
//Election message is sent from 2 to 4
//Election message is sent from 3 to 4
//After electing process the final coordinator is 4
---------------------------------------------------------------------------------------------------------------------------
task manager
//Main.java

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

class Server {
private final String name;
private final Map<String, Integer> executionCosts; // Execution costs for each task
private int load;

public Server(String name) {
this.name = name;
this.executionCosts = new HashMap<>();
this.load = 0;
}

public String getName() {
return name;
}

public int getLoad() {
return load;
}

public void increaseLoad() {
load++;
}

public void decreaseLoad() {
load--;
}

public void setExecutionCost(String task, int cost) {
executionCosts.put(task, cost);
}

public int getExecutionCost(String task) {
return executionCosts.getOrDefault(task, 0); // Default to 0 if task not found
}
}

class LoadBalancer {
private final List<Server> servers;
private int currentIndex;

public LoadBalancer(List<Server> servers) {
this.servers = servers;

this.currentIndex = 0;
}

public Server getNextServer() {
Server nextServer = servers.get(currentIndex);
currentIndex = (currentIndex + 1) % servers.size();
return nextServer;
}
}

class Main {
private static final int COMMUNICATION_COST_PER_REQUEST = 2;

public static void main(String[] args) {
// Create servers
List<Server> servers = new ArrayList<>();
Server server1 = new Server("Server 1");
Server server2 = new Server("Server 2");
Server server3 = new Server("Server 3");

// Define execution costs for tasks on each server
server1.setExecutionCost("Task A", 5);
server1.setExecutionCost("Task B", 7);
server2.setExecutionCost("Task A", 6);
server2.setExecutionCost("Task B", 8);

server3.setExecutionCost("Task A", 4);
server3.setExecutionCost("Task B", 6);

servers.add(server1);
servers.add(server2);
servers.add(server3);

LoadBalancer loadBalancer = new LoadBalancer(servers);

int totalExecutionCost = 0;
int totalCommunicationCost = 0;

// Simulate requests
String[] tasks = {"Task A", "Task B"};
for (int i = 0; i < 10; i++) {
String task = tasks[i % tasks.length]; // Rotate through tasks
Server server = loadBalancer.getNextServer();
server.increaseLoad();

int executionCost = server.getExecutionCost(task);
totalExecutionCost += executionCost;

totalCommunicationCost += COMMUNICATION_COST_PER_REQUEST;
System.out.println("Request " + i + " (Task: " + task + ") handled by " + server.getName()
+

" (Execution Cost: $" + executionCost + ")");
}

// Print server loads
for (Server server : servers) {
System.out.println(server.getName() + " load: " + server.getLoad());
}

// Calculate total cost
int totalCost = totalExecutionCost + totalCommunicationCost;
System.out.println("Total Execution Cost: $" + totalExecutionCost);
System.out.println("Total Communication Cost: $" + totalCommunicationCost);
System.out.println("Total Cost: $" + totalCost);
}
}

output
Request 0 (Task: Task A) handled by Server 1 (Execution Cost: $5)
Request 1 (Task: Task B) handled by Server 2 (Execution Cost: $8)
Request 2 (Task: Task A) handled by Server 3 (Execution Cost: $4)
Request 3 (Task: Task B) handled by Server 1 (Execution Cost: $7)
Request 4 (Task: Task A) handled by Server 2 (Execution Cost: $6)
Request 5 (Task: Task B) handled by Server 3 (Execution Cost: $6)
Request 6 (Task: Task A) handled by Server 1 (Execution Cost: $5)
Request 7 (Task: Task B) handled by Server 2 (Execution Cost: $8)
Request 8 (Task: Task A) handled by Server 3 (Execution Cost: $4)
Request 9 (Task: Task B) handled by Server 1 (Execution Cost: $7)
Server 1 load: 4
Server 2 load: 3
Server 3 load: 3
Total Execution Cost: $60
Total Communication Cost: $20
Total Cost: $80


